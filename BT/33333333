// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BankAccount {
    address public owner;
    uint256 public balance;

  
    event Deposit(address indexed from, uint256 amount);
    event Withdraw(address indexed to, uint256 amount);

   
    constructor() {
        owner = msg.sender; 
        balance = 0; 
    }

   
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the account owner can perform this action");
        _;
    }

    
    function deposit() public payable {
        require(msg.value > 0, "Deposit value must be greater than zero");
        balance += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

  
    function withdraw(uint256 _amount) public onlyOwner {
        require(_amount <= balance, "Insufficient balance");
        balance -= _amount;
        payable(msg.sender).transfer(_amount);
        emit Withdraw(msg.sender, _amount);
    }

    function getBalance() public view returns (uint256) {
        return balance;
    }

   
    receive() external payable {
        balance += msg.value;
        emit Deposit(msg.sender, msg.value);
    }
}
