// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BankAccount {
    address public owner;
    uint256 public balance;

    // Event logs for deposit and withdrawal activities
    event Deposit(address indexed from, uint256 amount);
    event Withdraw(address indexed to, uint256 amount);

    // Constructor to set the contract creator as the owner
    constructor() {
        owner = msg.sender; // The person who deploys the contract is the owner
        balance = 0; // Initial balance is set to zero
    }

    // Modifier to restrict certain functions to the owner only
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the account owner can perform this action");
        _;
    }

    // Function to deposit Ether into the account
    function deposit() public payable {
        require(msg.value > 0, "Deposit value must be greater than zero");
        balance += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    // Function to withdraw Ether from the account
    function withdraw(uint256 _amount) public onlyOwner {
        require(_amount <= balance, "Insufficient balance");
        balance -= _amount;
        payable(msg.sender).transfer(_amount);
        emit Withdraw(msg.sender, _amount);
    }

    // Function to check the balance of the account
    function getBalance() public view returns (uint256) {
        return balance;
    }

    // Fallback function to receive Ether directly
    receive() external payable {
        balance += msg.value;
        emit Deposit(msg.sender, msg.value);
    }
}
